package app

import (
	"errors"
	"fmt"
	"log"
	"regexp"
	"strconv"

	"github.com/satori/go.uuid"
	"github.com/wastebot/dbs"
	"github.com/wastebot/tg"
)

const (
	graph                   = "üìà –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–∞—Ç"
	list                    = "üóí –°–ø–∏—Å–æ–∫ —Ç—Ä–∞—Ç"
	listThisMonthString     = "–°–ø–∏—Å–æ–∫ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"
	listPreviousMonthString = "–°–ø–∏—Å–æ–∫ –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü"
	info                    = "üìç –ò–Ω—Ñ–æ"
	goBackString            = "üîô –ù–∞–∑–∞–¥"
	err1                    = "–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –µ—â–µ —Ä–∞–∑"
	err2                    = "–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –µ—â–µ —Ä–∞–∑"
	succ                    = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
)

var (
	nilKeyboard = tg.ReplyKeyboardMarkup{
		Keyboard: [][]tg.KeyboardButton{},
	}

	startKeyboard = tg.ReplyKeyboardMarkup{
		ResizeKeyboard: true,
		Keyboard: [][]tg.KeyboardButton{
			{{Text: graph}, {Text: list}},
			{{Text: info}},
		},
	}

	listKeyboard = tg.ReplyKeyboardMarkup{
		ResizeKeyboard: true,
		Keyboard: [][]tg.KeyboardButton{
			{{Text: listThisMonthString}, {Text: listPreviousMonthString}},
			{{Text: info}, {Text: goBackString}},
		},
	}

	re, _ = regexp.Compile("(?P<amount>\\d{0,})(?P<title>.*)#(?P<category>.*)?")
)

type manager struct {
	dbs dbs.Manager
	tg  tg.Manager
}

type Manager interface {
	Listen()
}

// NewManager - ...
func NewManager(dbs dbs.Manager, tg tg.Manager) Manager {
	return &manager{
		dbs: dbs,
		tg:  tg,
	}
}

// Listen ...
func (m *manager) Listen() {
	log.Println("Listening...")

	msgChan, _ := m.tg.GetMessagesChan()
	for msg := range msgChan {
		go m.handleMsg(msg)
	}
}

func (m *manager) handleMsg(msg *tg.Message) error {
	if msg == nil {
		return errors.New("Nil pointer on msg")
	}

	match := re.FindStringSubmatch(msg.Text)

	switch {
	case msg.Text == "/start":
		m.tg.SendMessage(msg.Chat.ID, "–•–∞—é —Ö–∞–π", "Markdown", &startKeyboard)
	case match != nil:
		message := m.addWaste(match, msg.User)
		m.tg.SendMessage(msg.Chat.ID, message, "Markdown", &startKeyboard)
	case msg.Text == graph:
		message := m.generateLink(msg.User.ID)
		m.tg.SendMessage(msg.Chat.ID, message, "Markdown", &startKeyboard)
	case msg.Text == list:
		m.tg.SendMessage(msg.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫", "Markdown", &listKeyboard)
	case msg.Text == listThisMonthString:
		message := m.giveCurrentMonthStatisticList(msg.User.ID)
		m.tg.SendMessage(msg.Chat.ID, message, "Markdown", &listKeyboard)
	case msg.Text == listPreviousMonthString:
		message := m.givePreviousMonthStatisticList(msg.User.ID)
		m.tg.SendMessage(msg.Chat.ID, message, "Markdown", &listKeyboard)
	case msg.Text == goBackString:
		message := fmt.Sprintf("–ß–µ–≥–æ –∏–∑–≤–æ–ª–∏—Ç–µ, %s %s?", msg.User.FirstName, msg.User.LastName)
		m.tg.SendMessage(msg.Chat.ID, message, "Markdown", &startKeyboard)
	default:
		message := fmt.Sprintf("–ß–µ–≥–æ –∏–∑–≤–æ–ª–∏—Ç–µ, %s %s?", msg.User.FirstName, msg.User.LastName)
		m.tg.SendMessage(msg.Chat.ID, message, "Markdown", &startKeyboard)
	}

	return nil
}

func (m *manager) giveCurrentMonthStatisticList(telegramID uint64) (message string) {
	results := m.dbs.CurrentMonthStatistic(telegramID)
	if len(results) == 0 {
		return "–£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–∞—Ç –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥"
	}

	for _, res := range results {
		message += fmt.Sprintf("%s | –ö–æ–ª-–≤–æ —Ç—Ä–∞—Ç: %v | ‚ÇΩ: %v", res.Category, res.Count, res.Amount)
		message += "\n ---------------\n\n"
	}

	return message
}

func (m *manager) givePreviousMonthStatisticList(telegramID uint64) (message string) {
	results := m.dbs.PreviousMonthStatistic(telegramID)
	if len(results) == 0 {
		return "–£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–∞—Ç –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥"
	}

	for _, res := range results {
		message += fmt.Sprintf("%s | –ö–æ–ª-–≤–æ —Ç—Ä–∞—Ç: %v | ‚ÇΩ: %v", res.Category, res.Count, res.Amount)
		message += "\n ---------------\n\n"
	}

	return message
}

func (m *manager) addWaste(match []string, tgUser *tg.User) string {
	// –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ–ª–µ–π
	// –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫ –æ–±—â–µ–º—É –≤–∏–¥—É (—Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã)
	result := make(map[string]string)
	for i, name := range re.SubexpNames() {
		if i != 0 {
			result[name] = match[i]
		}
	}
	fmt.Printf("Amount: %s  Tilte: %s Category: %s \n", result["amount"], result["title"], result["category"])

	user, err := m.dbs.FindOrCreateUser(tgUser.ID, tgUser.FirstName, tgUser.LastName, tgUser.LanguageCode)
	if err != nil {
		log.Println(err)
		return err2
	}

	amount, err := strconv.ParseUint(result["amount"], 10, 64)
	if err != nil {
		log.Println(err)
		return err1
	}
	_, err = m.dbs.CreateTransaction(user.ID, user.TelegramID, amount, result["title"], result["category"])
	if err != nil {
		// –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É (something wrong)
		log.Println(err)
		return err2
	}

	return succ
}

func (m *manager) generateLink(tid uint64) (message string) {
	// Creating UUID Version 4
	uuid := uuid.NewV4().String()

	_, err := m.dbs.SetUUID(tid, uuid)
	if err != nil {
		log.Println(err)
	}

	// message = fmt.Sprintf("http://127.0.0.1:3000/%s", uuid)
	message = fmt.Sprintf("http://192.168.14.195:3000/%s", uuid)
	return message
}
